#define a new model using glmnet, which standardizes the predictors before hand
model_lasso =
linear_reg(penalty = tune(), mixture = 1) |>
set_engine("glmnet")
#generate a lambda vector with 100 entries, generated from a sequence from 10 to -10
lambdas = 10 ^ seq(from = 10, to = -10, length = 100)
#define a new workflow for lasso with the new model generated above, using the same recipe as before.
workflow_lasso = workflow() |>
add_model(model_lasso) |>
add_recipe(amesrecipe)
#calcualte the cross validated RMSE for each value of lambda
lasso_cv = workflow_lasso |>
tune_grid(
ames_cv,
grid = data.frame(penalty = lambdas),
metrics = metric_set(rmse)
)
#show the best resulting permutations of predictor variables
lasso_cv |> show_best()
autoplot(lasso_cv, metric = "rmse")
#selects the best permutation of predictor variables, and records it
final_lasso =
workflow_lasso|>
finalize_workflow(select_best(lasso_cv, metric = "rmse"))
#fits the best lasso against the split ames data
finalfitlasso = final_lasso|>
last_fit(ames_split)
#display the RMSE and RSQ of the best formula
collect_metrics(finalfitlasso)
#extracts the values of the coefficients from the best formula
lassobetas = finalfitlasso|>
extract_fit_parsnip()|>
tidy()
#removes all of the coefficients which had no effect
betasthatmatter = lassobetas|>
filter(estimate != 0)
#displays the coefficients in a table
datatable(betasthatmatter, options = list(dom = 'tp'))
#makes a graph showing the best fit
final_fit_lasso |> collect_predictions() |>
ggplot(aes(x=.pred, y=Sale_Price)) +
geom_abline(slope=1) +
geom_point(color="blue")
#makes a graph showing the best fit
finalfitlasso |> collect_predictions() |>
ggplot(aes(x=.pred, y=Sale_Price)) +
geom_abline(slope=1) +
geom_point(color="blue")
# Ranges of λ and α
lambdas = 10 ^ seq(from = 5, to = -2, length = 100)
alphas = seq(from = 0, to = 1, length = 100)
# Define the elasticnet model
model_net = linear_reg(penalty = tune(), mixture = tune()) |>
set_engine("glmnet")
# Define the workflow
workflow_net = workflow() |>
add_recipe(amesrecipe) |>
add_model(model_net)
# CV elasticnet with our ranges of lambdas and alphas
cv_net =
workflow_net |>
tune_grid(
ames_cv,
grid = expand_grid(mixture = alphas, penalty = lambdas),
metrics = metric_set(rmse)
)
#show the best resulting permutations of predictor variables
cv_net |> show_best()
autoplot(cv_net, metric = "rmse")
#selects the best permutation of predictor variables, and records it
final_lasso =
workflow_lasso|>
finalize_workflow(select_best(cv_net, metric = "rmse"))
#fits the best lasso against the split ames data
finalfitlasso = final_lasso|>
last_fit(ames_split)
#display the RMSE and RSQ of the best formula
collect_metrics(finalfitlasso)
#extracts the values of the coefficients from the best formula
lassobetas = finalfitlasso|>
extract_fit_parsnip()|>
tidy()
#removes all of the coefficients which had no effect
betasthatmatter = lassobetas|>
filter(estimate != 0)
#displays the coefficients in a table
datatable(betasthatmatter, options = list(dom = 'tp'))
# Define the elasticnet model
model_net = linear_reg(penalty = tune(), mixture = tune()) |>
set_engine("glmnet")
# Define the workflow
workflow_net = workflow() |>
add_recipe(credit_recipe) |>
add_model(model_net)
# Define the workflow
workflow_net = workflow() |>
add_recipe(amesrecipe) |>
add_model(model_net)
# CV elasticnet with grid_regular()
cv_net =
workflow_net |>
tune_grid(
credit_cv,
grid = grid_regular(mixture(), penalty(), levels=5:5),
metrics = metric_set(rmse)
)
# CV elasticnet with grid_regular()
cv_net =
workflow_net |>
tune_grid(
ames_cv,
grid = grid_regular(mixture(), penalty(), levels=5:5),
metrics = metric_set(rmse)
)
# CV elasticnet with grid_regular()
cv_net =
workflow_net |>
tune_grid(
ames_cv,
grid = grid_regular(mixture(), penalty(), levels=5:5),
metrics = metric_set(rmse)
)
#show the best resulting permutations of predictor variables
cv_net |> show_best()
autoplot(cv_net, metric = "rmse")
autoplot(cv_net, metric = "rmse")
#selects the best permutation of predictor variables, and records it
final_lasso =
workflow_lasso|>
finalize_workflow(select_best(cv_net, metric = "rmse"))
#fits the best lasso against the split ames data
finalfitlasso = final_lasso|>
last_fit(ames_split)
#display the RMSE and RSQ of the best formula
collect_metrics(finalfitlasso)
#extracts the values of the coefficients from the best formula
lassobetas = finalfitlasso|>
extract_fit_parsnip()|>
tidy()
#removes all of the coefficients which had no effect
betasthatmatter = lassobetas|>
filter(estimate != 0)
#displays the coefficients in a table
datatable(betasthatmatter, options = list(dom = 'tp'))
# Check the performance of the recipe and the model.
final_ols |> collect_metrics()
#displays the coefficients in a table
datatable(betasthatmatter, options = list(dom = 'tp'))
#display the RMSE and RSQ of the best formula
collect_metrics(finalfitlasso)
# Check the performance of the recipe and the model.
final_ols |> collect_metrics()
action = pd_malone
pd_malone = function(own_hist=NULL, opp_hist=NULL){
if (length(own_hist) == 0 & length(opp_hist) == 0){
action = 1
}
return(action)
}
action = pd_malone
View(action)
action = pd_malone(NULL, NULL)
pd_malone = function(own_hist=NULL, opp_hist=NULL){
if (length(own_hist) == 0 & length(opp_hist) == 0){
action = 1
else if(length(own_hist) == 1 & length(opp_hist) == 1){
else (if(length(own_hist) == 1 & length(opp_hist) == 1)){
pd_malone = function(own_hist=NULL, opp_hist=NULL){
if (length(own_hist) == 0 & length(opp_hist) == 0){
action = 1
else (if(length(own_hist) == 1 & length(opp_hist) == 1)){
pd_malone = function(own_hist=NULL, opp_hist=NULL){
if (length(own_hist) == 0 & length(opp_hist) == 0){
action = 1
}
else if(length(own_hist) == 1 & length(opp_hist) == 1){
action = 1
}
else if(sum(own_hist)/length(own_hist) >= 0.5 & sum(opp_hist)/length(opp_hist) >= 0.5){
action = 1
}
else{
action = 0
}
return(action)
}
action = pd_malone(NULL, NULL)
action = pd_malone(c(1), c(0))
action = pd_malone(c(1,1,1,1), c(0,1,1,1))
action = pd_malone(c(1,1,1,1), c(0,0,0,0))
buckets = [0] * 100
N   <- 100
vec <- c(0, 1)
lst <- lapply(numeric(N), function(x) vec)
as.matrix(expand.grid(lst))
as.matrix(expand.grid(lst))
expand.grid(lst)
expand_grid(lst)
n <- 14
l <- rep(list(0:1), n)
expand.grid(l)
n <- 100
l <- rep(list(0:1), n)
expand.grid(l)
n <- 99
l <- rep(list(0:1), n)
expand.grid(l)
n <- 14
l <- rep(list(0:1), n)
expand.grid(l)
as.matrix(expand.grid(l))
opponentchoice = as.matrix(expand.grid(l))
n <- 20
l <- rep(list(0:1), n)
opponentchoice = as.matrix(expand.grid(l))
View(opponentchoice)
n <- 15
l <- rep(list(0:1), n)
opponentchoice = as.matrix(expand.grid(l))
pgame = function(action,reaction){
if (action = 1 & reaction = 1){
else if(action == 0 & reaction == 0){
pgame = function(action,reaction){
if (action == 1 & reaction == 1){
playerpayout = 3
opponentpayout = 3
}
else if(action == 1 & reaction == 0){
playerpayout = 0
opponentpayout = 5
}
else if(action == 0 & reaction == 1){
playerpayout = 5
opponentpayout = 0
}
else if(action == 0 & reaction == 0){
playerpayout = 1
opponentpayout = 1
}
playertotal = playerpayout + playertotal
opponenttotal = opponentpayout + opponenttotal
own_hist = c(own_hist, action)
opp_hist = c(opp_hist, reaction)
}
pgame(pd_malone(own_hist, opp_hist),1)
own_hist = c()
opp_hist = c()
pgame(pd_malone(own_hist, opp_hist),1)
playertotal = 0
opponenttotal = 0
pgame(pd_malone(own_hist, opp_hist),1)
pgame(pd_malone(own_hist, opp_hist),1)
pgame(pd_malone(own_hist, opp_hist),0)
load("C:/Users/malon/OneDrive/Documents/GitHub/Advanced-Data-Project-Daniel-Margo/Data/Plots.RDA")
load("C:/Users/malon/OneDrive/Documents/GitHub/Advanced-Data-Project-Daniel-Margo/Data/Cleaned National Crime Statistics.Rda")
View(nationalcrime2)
load("C:/Users/malon/OneDrive/Documents/GitHub/Advanced-Data-Project-Daniel-Margo/Code/Zoning_Cleaned.RDA")
setwd("C:/Users/malon/OneDrive/Documents/GitHub/Advanced-Data-Project-Daniel-Margo/Data")
read.csv("Combined Transformed Vars")
read.csv("Combined Transformed Vars.csv")
dat = read.csv("Combined Transformed Vars.csv")
View(dat)
library(tidyverse)
dat2 = dat|>
group_by(State)|>
mutate(statereform = ifelse(is.na(reform_mechanism) == TRUE),0,1)
mutate(statereform = ifelse(is.na(reform_mechanism) == TRUE,0,1)
dat2 = dat|>
dat2 = dat|>
dat2 = dat|>
mutate(reform = ifelse(is.na(reform_mechanism) == TRUE,0,1)
mutate(reform = ifelse(is.na(reform_mechanism) == TRUE,0,1)
dat2 = dat|>
mutate(reform = ifelse(is.na(reform_mechanism) == TRUE,0,1)
dat2 = dat|>
mutate(reform = ifelse(is.na(reform_mechanism) == TRUE,0,1)
dat2 = dat|>
dat2 = dat|>
mutate(reform = ifelse(is.na(reform_mechanism) = TRUE, 0, 1)
```{r}
dat = read.csv("Combined Transformed Vars.csv")
dat2 = dat|>
mutate(reform = ifelse(is.na(reform_mechanism) == TRUE, 0, 1)
dat2 = dat|>
dat2 = dat|>
group_by(Agency.Name)|>
mutate(reform = ifelse(is.na(reform_mechanism) == TRUE, 0, 1))
reg = ln(Total.Crime.Rate ~ reform)
reg = lm(Total.Crime.Rate ~ reform)
reg = lm(Total.Crime.Rate ~ reform, data = dat2)
summart(reg)
summary(reg)
reg = lm(Total.Crime.Rate ~ reform + State - 1, data = dat2)
summary(reg)
reg = lm(Total.Crime.Rate ~ reform + State - 1 + year - 1, data = dat2)
summary(reg)
dat2$year = as.factor(dat2$year)
reg = lm(Total.Crime.Rate ~ reform + State - 1 + year - 1, data = dat2)
summary(reg)
library(rvest)
library(httr)
library(jsonlite)
unemp2022 = read_html("https://www.bls.gov/lau/lastrk22.htm")
unemp2022 = read_html("https://data.ers.usda.gov/reports.aspx?ID=17828")
tables = unemp2022|>
html_elements("table")
unemp = tables[[1]]
unemp = tables[[2]]
unemp = tables[[1]]|>
html_table()
unemp = tables[[1]]|>
html_table()
View(unemp)
unemp = tables[[2]]|>
html_table()
unemp = tables[[3]]|>
html_table()
unemp = tables[[4]]|>
html_table()
View(unemp)
unemp = tables[[1]]|>
html_table()
View(unemp)
read_html("Unemployment.xlsx")
read_xlsx("Unemployment.xlsx")
library(readxl)
read_xlsx("Unemployment.xlsx")
unemp = read_xlsx("Unemployment.xlsx")
View(unemp)
unemp = read_xlsx("Unemployment.xlsx", skip = 3, col_names = TRUE)
unemp = read_xlsx("Unemployment.xlsx", skip = 4, col_names = TRUE)
unemp2 = unemp|>
separate_wider_position(FIPS_Code, c(statefip = 2, countyfip = 3))
View(unemp2)
unemp2 = unemp2|>
filter(countyfip == 000)|>
filter(statefip != 00)
unemp2 = unemp|>
separate_wider_position(FIPS_Code, c(statefip = 2, countyfip = 3))
unemp2 = unemp2|>
filter(countyfip == "000")|>
filter(statefip != "00")
unemp2$State = unemp2$Area_Name
toupper(unemp$State)
unemp2$State = toupper(unemp2$State)
View(dat2)
unemp3 = unemp2|>
select(State, Unemployment_rate_2020, Unemployment_rate_2021, Unemployment_rate_2022)
View(unemp3)
unemp3 = unemp3|>
pivot_longer(cols = Unemployment_rate_2020:Unemployment_rate_2022)
unemp3 = unemp3|>
pivot_longer(cols = Unemployment_rate_2020:Unemployment_rate_2022)|>
rename(unemployment.rate = value)
unemp3 = unemp3|>
pivot_longer(cols = Unemployment_rate_2020:Unemployment_rate_2022)|>
unemp3 = unemp3|>
rename(unemp.rate = value)
unemp3 = unemp3|>
rename(unemp.rate = value)
unemp3 = unemp3|>
separate_wider_delim(name, delim = "_")
unemp3 = unemp3|>
separate_wider_delim(cols = name, delim = "_")
unemp3 = unemp3|>
separate_wider_delim(cols = name, delim = "_", names = c(1,2,3))
unemp3 = unemp3|>
separate_wider_delim(cols = name, delim = "_", names = c("1", "2", "3"))
select(!`1` | `2`)
unemp3 = unemp3|>
rename(year = `3`)|>
select(!`1` | `2`)
unemp3 = unemp3|>
rename(year = `3`)|>
select(!`1` | !`2`)
unemp3 = unemp2|>
select(State, Unemployment_rate_2020, Unemployment_rate_2021, Unemployment_rate_2022)
unemp3 = unemp3|>
pivot_longer(cols = Unemployment_rate_2020:Unemployment_rate_2022)
unemp3 = unemp3|>
rename(unemp.rate = value)
unemp3 = unemp3|>
separate_wider_delim(cols = name, delim = "_", names = c("1", "2", "3"))
unemp3 = unemp3|>
rename(year = `3`)|>
select(!`1` | !`2`)
unemp3 = unemp2|>
select(State, Unemployment_rate_2020, Unemployment_rate_2021, Unemployment_rate_2022)
unemp3 = unemp3|>
pivot_longer(cols = Unemployment_rate_2020:Unemployment_rate_2022)
unemp3 = unemp3|>
rename(unemp.rate = value)
unemp3 = unemp3|>
separate_wider_delim(cols = name, delim = "_", names = c("a", "b", "c"))
unemp3 = unemp3|>
rename(year = c)|>
select(!a,
!b)
unemp3 = unemp2|>
select(State, Unemployment_rate_2020, Unemployment_rate_2021, Unemployment_rate_2022)|>
pivot_longer(cols = Unemployment_rate_2020:Unemployment_rate_2022)|>
rename(unemp.rate = value)|>
separate_wider_delim(cols = name, delim = "_", names = c("a", "b", "c"))|>
rename(year = c)|>
select(State, year, unemp.rate)
unemp3$year = as.factor(unemp3$year)
dat3 = merge(dat2, unemp3)
View(dat3)
reg2 = lm(Total.Crime.Rate ~ reform + State - 1 + year - 1 + unemp.rate, data = dat3)
reg = lm(Total.Crime.Rate ~ reform + State - 1 + year - 1, data = dat3)
summary(reg)
summary(reg2)
reg3 = lm(Crimes.Property.Rate ~ reform + State - 1 + year - 1 + unemp.rate, data = dat3)
reg4 = lm(Crimes.Persons.Rate ~ reform + State - 1 + year - 1 + unemp.rate, data = dat3)
reg5 = lm(Crimes.Society.Rate ~ reform + State - 1 + year - 1 + unemp.rate, data = dat3)
summary(reg)
summary(reg2)
summary(reg3)
summary(reg4)
summary(reg5)
summary(reg4)
reg6 = lm(Crimes.Persons.Rate ~ reform + State - 1 + year - 1, data = dat3)
summary(reg6)
summary(reg4)
summary(reg6)
summary(reg4)
summary(reg3)
summary(reg4)
summary(reg5)
summary(reg)
dat3 = dat3|>
group_by(Agency.Name)|>
arrange(year)|>
mutate(laggedcrimerate = lag(Total.Crime.Rate),
laggedpropertyrate = lag(Crimes.Property.Rate),
laggedpersonsrate = lag(Crimes.Persons.Rate),
laggedsocietyrate = lag(Crimes.Society.Rate))
reg6 = lm(Crimes.Persons.Rate ~ reform + State - 1 + year - 1 + unemp.rate + laggedpersonsrate, data = dat3)
summary(reg6)
reg6 = lm(Total.Crime.Rate ~ reform + State - 1 + year - 1 + unemp.rate + laggedcrimerate, data = dat3)
summary(reg6)
reg8 = lm(Crimes.Property.Rate ~ reform + State - 1 + year - 1 + unemp.rate + laggedpropertyrate, data = dat3)
summary(reg8)
reg9 = lm(Crimes.Society.Rate ~ reform + State - 1 + year - 1 + unemp.rate + laggedsocietyrate, data = dat3)
summary(reg9())
summary(reg9)
dat3 = dat3|>
group_by(Agency.Name)|>
mutate(meancrimerate = mean(Total.Crime.Rate),
meanpropertyrate = mean(Crimes.Property.Rate),
meanpersonrate = mean(Crimes.Persons.Rate),
meansocietyrate = mean(Crimes.Society.Rate))
reg10 = lm(Total.Crime.Rate ~ reform + State - 1 + year - 1 + unemp.rate + meancrimerate, data = dat3)
summary(reg10)
reg11 = lm(Crimes.Persons.Rate ~ reform + State - 1 + year - 1 + unemp.rate + meanpersonsrate, data = dat3)
reg11 = lm(Crimes.Persons.Rate ~ reform + State - 1 + year - 1 + unemp.rate + meanpersonrate, data = dat3)
summary(reg11)
reg12 = lm(Crimes.Property.Rate ~ reform + State - 1 + year - 1 + unemp.rate + meanpropertyrate, data = dat3)
summary(reg12)
reg13 = lm(Crimes.Society.Rate ~ reform + State - 1 + year - 1 + unemp.rate + meansocietyrate, data = dat3)
summary(reg13)
reg14 = lm(Crimes.Property.Rate ~ reform + State - 1 + year - 1, data = dat3)
reg15 = lm(Crimes.Persons.Rate ~ reform + State - 1 + year - 1, data = dat3)
reg16 = lm(Crimes.Society.Rate ~ reform + State - 1 + year - 1, data = dat3)
summary(reg14) #reform on property crime
summary(reg15) #reform on persons crime
summary(reg16) #reform on society crime
write_csv(dat3, file = "Combined Unemp Crime Housing")
library(broom)
library(lmtest)
library(lmtest)
install.packages("lmtest")
tidy(reg)
tidy(reg, reg2)
install.packages("stargazer")
library(stargazer)
stargazer(reg, reg2)
out = stargazer(reg, reg2)
out = stargazer(reg, reg2, type = text)
out = stargazer(reg, reg2, type = "text")
out = stargazer(reg, reg2,reg6, reg10, type = "text")
#runs regressions, records the results, displays the results in the console
reg = lm(Total.Crime.Rate ~ reform + State - 1 + year - 1, data = dat3)
reg14 = lm(Crimes.Property.Rate ~ reform + State - 1 + year - 1, data = dat3)
reg15 = lm(Crimes.Persons.Rate ~ reform + State - 1 + year - 1, data = dat3)
reg16 = lm(Crimes.Society.Rate ~ reform + State - 1 + year - 1, data = dat3)
reg2 = lm(Total.Crime.Rate ~ reform + unemp.rate+ State - 1 + year - 1 , data = dat3)
reg3 = lm(Crimes.Property.Rate ~ reform+ unemp.rate + State - 1 + year - 1 , data = dat3)
reg4 = lm(Crimes.Persons.Rate ~ reform+ unemp.rate + State - 1 + year - 1 , data = dat3)
reg5 = lm(Crimes.Society.Rate ~ reform + unemp.rate+ State - 1 + year - 1 , data = dat3)
reg6 = lm(Total.Crime.Rate ~ reform + unemp.rate + laggedcrimerate+ State - 1 + year - 1 , data = dat3)
reg7 = lm(Crimes.Persons.Rate ~ reform + unemp.rate + laggedpersonsrate+ State - 1 + year - 1 , data = dat3)
reg8 = lm(Crimes.Property.Rate ~ reform + unemp.rate + laggedpropertyrate+ State - 1 + year - 1 , data = dat3)
reg9 = lm(Crimes.Society.Rate ~ reform  + unemp.rate + laggedsocietyrate+ State - 1 + year - 1, data = dat3)
reg10 = lm(Total.Crime.Rate ~ reform + unemp.rate + meancrimerate+ State - 1 + year - 1 , data = dat3)
reg11 = lm(Crimes.Persons.Rate ~ reform + unemp.rate + meanpersonrate+ State - 1 + year - 1 , data = dat3)
reg12 = lm(Crimes.Property.Rate ~ reform + unemp.rate + meanpropertyrate+ State - 1 + year - 1 , data = dat3)
reg13 = lm(Crimes.Society.Rate ~ reform + unemp.rate + meansocietyrate+ State - 1 + year - 1 , data = dat3)
out = stargazer(reg, reg2,reg6, reg10, type = "text")
library(memisc)
install.packages("memisc")
library(memisc)
write_html(out, "out.html")
out = stargazer(reg, reg2,reg6, reg10, type = "html", out = "out.html")
out = stargazer(reg, reg2,reg6, reg10, type = "docx", out = "out")
out = stargazer(reg, reg2,reg6, reg10, type = "docx", out = "out.docx")
out2 = stargazer(reg14, reg3, reg8, reg12, type = "html", out = "out2.html")
stargazer(reg, reg2,reg6, reg10, type = "html", out = "out.html")
stargazer(reg14, reg3, reg8, reg12, type = "html", out = "out2.html")
stargazer(reg15, reg4, reg7, reg11, type = "html", out = "out3.html")
stargazer(reg16, reg5, reg9, reg13, type = "html", out = "out4.html")
stargazer(reg, reg2,reg6, reg10, type = "text")
